{"version":3,"file":"js/431.e5f22d8d.js","mappings":"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","sources":["webpack://sad/./src/views/SADFluidity.vue","webpack://sad/./src/views/SADFluidity.vue?127b"],"sourcesContent":["<template>\n    <div class=\"box-style fluidity-box\">\n        <div class=\"gradient-label-box\">\n            <label class=\"gradient-label\">SAD {{ $t('home.fluidity') }}</label>\n        </div>\n        <div class=\"total-pledge\">\n            <label class=\"pledge-title\">{{ $t('hycFluidity.totalPledge') }}</label>\n            <label class=\"pledge-info\">{{ state.totalPledge.toFixed(4) }} LP</label>\n        </div>\n        <div class=\"income-rate\">\n            <label class=\"pledge-title\">{{ $t('sadFluidity.incomeRate') }}</label>\n            <label class=\"pledge-info\">{{ state.rewardRate }} %</label>\n        </div>\n        <div class=\"income-rate\">\n            <label class=\"pledge-title\">{{ $t('hycFluidity.myPledge') }}</label>\n            <label class=\"pledge-info\">{{ state.myPledge.toFixed(4) }} LP</label>\n        </div>\n        <div class=\"input-box\">\n            <van-field v-model=\"state.pledgeNumber\" :placeholder=\"$t('hycFluidity.inputPlaceholder')\">\n                <template #button>\n                    <div class=\"gradient-label\" @click=\"clickPledgeAll\">\n                        {{ $t('hycFluidity.all') }}\n                    </div>\n                </template>\n            </van-field>\n        </div>\n        <div class=\"income-rate\">\n            <label class=\"pledge-title\">{{ $t('hycFluidity.availableBalance') }}</label>\n            <label class=\"pledge-info\">{{ state.lpBalance.toFixed(4) }} LP</label>\n        </div>\n        <div class=\"button-box\">\n            <div class=\"button-style button-font\"\n                :style=\"(state.pledgeNumber > 0) ? ('opacity: 1;') : ('opacity: 0.5;')\" @click=\"clickPledge\">\n                {{ $t('hycFluidity.pledge') }}\n            </div>\n        </div>\n        <div class=\"my-income\">\n            <label class=\"pledge-title\">{{ $t('hycFluidity.myIncome') }}</label>\n            <label class=\"pledge-info\">{{ state.myIncome.toFixed(8) }} SAD</label>\n        </div>\n        <div class=\"button-box function-button-box\">\n            <div class=\"button-style button-font item-button\"\n                :style=\"(state.myPledge > 0) ? ('opacity: 1;') : ('opacity: 0.5;')\" @click=\"clickQuitPledge\">\n                {{ $t('hycFluidity.quit') }}\n            </div>\n            <div class=\"button-style button-font item-button\"\n                :style=\"(state.myIncome > 0) ? ('opacity: 1;') : ('opacity: 0.5;')\" @click=\"clickExtract\">\n                {{ $t('hycFluidity.extract') }}\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup>\n\nimport { reactive, ref, onMounted, onUnmounted, getCurrentInstance, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport staking from '@/json/staking.json'\nimport token from '@/json/token.json'\nimport { ethers, utils, constants } from 'ethers';\nimport { Toast } from 'vant';\nimport i18n from '@/i18n';\n\nconst { proxy } = getCurrentInstance()\nconst route = useRoute()\nconst timer = ref(0)\n\nconst state = reactive({\n    stakingContractAddress: process.env.VUE_APP_SAD_STAKING_CONTRACT_ADDRESS,\n    stakingContract: null,\n    lpContractAddress: process.env.VUE_APP_SAD_USDT_CONTRACT_ADDRESS,\n    lpContract: null,\n\n    totalPledge: 0,\n    rewardRate: 0,\n    myPledge: 0,\n    lpBalance: 0,\n    myIncome: 0,\n    pledgeNumber: 0\n})\n\nwatch(() => route.account, () => {\n    checkAuthorizeStatus()\n    getUserInfo()\n})\nonMounted(async () => {\n    state.stakingContract = new ethers.Contract(state.stakingContractAddress, staking, proxy.$provider.getSigner())\n    state.lpContract = new ethers.Contract(state.lpContractAddress, token, proxy.$provider.getSigner())\n    setIntervalRefreshData()\n    checkAuthorizeStatus()\n    getRewardRate()\n    getTotalSupply()\n    getUserInfo()\n})\n\nconst setIntervalRefreshData = (() => {\n    timer.value = window.setInterval(async () => {\n        getTotalSupply()\n        getUserInfo()\n    }, 3000)\n})\nconst clearIntervalRefreshData = (() => {\n    window.clearInterval(timer.value)\n})\n\nonUnmounted(() => {\n    clearIntervalRefreshData()\n})\n\nconst getTotalSupply = (async () => {\n    const totalSupply = await state.stakingContract.lp_totalSupply()\n    state.totalPledge = parseFloat(utils.formatEther(totalSupply))\n})\nconst getRewardRate = (async () => {\n    const rate = await state.stakingContract.lp_rewardRate()\n    state.rewardRate = rate / 100\n})\nconst getUserInfo = (async () => {\n    const balanceOf = await state.stakingContract.lp_balanceOf(route.account)\n    state.myPledge = parseFloat(utils.formatEther(balanceOf))\n\n    const lpBalanceOf = await state.lpContract.balanceOf(route.account)\n    state.lpBalance = parseFloat(utils.formatEther(lpBalanceOf))\n\n    const rewards = await state.stakingContract.lp_rewards(route.account)\n    state.myIncome = parseFloat(utils.formatEther(rewards))\n})\n\nconst checkAuthorizeStatus = (async () => {\n    const allowance = await state.lpContract.allowance(route.account, state.stakingContractAddress)\n    if (allowance.eq(constants.MaxUint256)) {\n        route.isSADUSDTAuthorize = true\n    } else {\n        route.isSADUSDTAuthorize = false\n    }\n})\n\nconst clickPledgeAll = (() => {\n    state.pledgeNumber = state.lpBalance\n})\nconst clickPledge = (async () => {\n    if (state.pledgeNumber > state.lpBalance) {\n        Toast.fail(i18n.global.t('toast.insufficientBalance'))\n    } else if (parseFloat(state.pledgeNumber) > 0) {\n        startPledge()\n    } else {\n        Toast.fail(i18n.global.t('toast.inputError'))\n    }\n})\n\nconst startPledge = (async () => {\n    if (route.isSADUSDTAuthorize) {\n        Toast.loading()\n        const stake = await state.stakingContract.lp_stake(utils.parseEther(state.pledgeNumber.toString()))\n        stake.wait()\n        state.pledgeNumber = 0\n        getTotalSupply()\n        getUserInfo()\n    } else {\n        Toast.loading()\n        const approve = await state.lpContract.approve(state.stakingContractAddress, constants.MaxUint256)\n        approve.wait()\n        route.isSADUSDTAuthorize = true\n        startPledge()\n    }\n})\n\nconst clickQuitPledge = (async () => {\n    if (state.myPledge > 0) {\n        Toast.loading()\n        const exit = await state.stakingContract.lp_exit()\n        exit.wait()\n    }\n})\n\nconst clickExtract = (async () => {\n    if (state.myIncome > 0) {\n        Toast.loading()\n        const reward = await state.stakingContract.lp_getReward()\n        reward.wait()\n        getUserInfo()\n    }\n})\n\n</script>\n\n<style lang=\"less\" scoped>\n@import '@/common/base.less';\n\n.pledge-title {\n    .scw(@titleColorTwo, 14px, 500);\n    font-family: PingFangSC-Medium, PingFang SC;\n}\n\n.pledge-info {\n    .scw(@titleColorOne, 14px, 500);\n    font-family: PingFangSC-Medium, PingFang SC;\n}\n\n.button-box {\n    margin: 15px;\n\n    .button-font {\n        font-size: 14px;\n    }\n}\n\n.fluidity-box {\n    margin: 10px 15px;\n\n    .total-pledge {\n        margin: 15px 15px 0 15px;\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .income-rate {\n        margin: 10px 15px 0 15px;\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .my-income {\n        margin: 20px 15px 0 15px;\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .function-button-box {\n        display: flex;\n        justify-content: space-between;\n\n        .item-button {\n            width: calc(calc(100% - 10px) / 2.0);\n        }\n    }\n}\n</style>","import script from \"./SADFluidity.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SADFluidity.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./SADFluidity.vue?vue&type=style&index=0&id=3050ef36&lang=less&scoped=true\"\n\nimport exportComponent from \"/Users/leonis/workspace/projects/hyc/hyc-web/sad/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-3050ef36\"]])\n\nexport default __exports__"],"names":["proxy","getCurrentInstance","route","useRoute","timer","ref","state","reactive","stakingContractAddress","process","stakingContract","lpContractAddress","lpContract","totalPledge","rewardRate","myPledge","lpBalance","myIncome","pledgeNumber","watch","account","checkAuthorizeStatus","getUserInfo","onMounted","async","ethers","staking","$provider","getSigner","token","setIntervalRefreshData","getRewardRate","getTotalSupply","value","window","setInterval","clearIntervalRefreshData","clearInterval","onUnmounted","totalSupply","lp_totalSupply","parseFloat","utils","rate","lp_rewardRate","balanceOf","lp_balanceOf","lpBalanceOf","rewards","lp_rewards","allowance","eq","constants","isSADUSDTAuthorize","clickPledgeAll","clickPledge","i18n","startPledge","stake","lp_stake","toString","wait","approve","clickQuitPledge","exit","lp_exit","clickExtract","reward","lp_getReward","__exports__"],"sourceRoot":""}